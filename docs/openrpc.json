{
  "openrpc": "1.0.0",
  "info": {
    "title": "Hedera JSON-RPC Specification",
    "description": "A specification of the whaaaaimplemented Ethereum JSON RPC APIs interface for Hedera clients and adheres to the Ethereum execution APIs schema..",
    "version": "0.69.0-SNAPSHOT"
  },
  "servers": [
    {
      "name": "Mainnet",
      "url": "https://mainnet.hashio.io/api",
      "description": "Hedera Mainnet endpoint, hosted by [Hashio](https://swirldslabs.com/hashio/), a JSON-RPC Relay Community Service. Rate limited based [on IP address](https://github.com/hiero-ledger/hiero-json-rpc-relay/blob/main/docs/rate-limiting.md) and [on global HBAR spend](https://github.com/hiero-ledger/hiero-json-rpc-relay/blob/main/docs/hbar-limiting.md)."
    },
    {
      "name": "Testnet",
      "url": "https://testnet.hashio.io/api",
      "description": "Hedera Testnet endpoint, hosted by [Hashio](https://swirldslabs.com/hashio/), a JSON-RPC Relay Community Service. Rate limited based [on IP address](https://github.com/hiero-ledger/hiero-json-rpc-relay/blob/main/docs/rate-limiting.md) and [on global HBAR spend](https://github.com/hiero-ledger/hiero-json-rpc-relay/blob/main/docs/hbar-limiting.md)."
    },
    {
      "name": "Previewnet",
      "url": "https://previewnet.hashio.io/api",
      "description": "Hedera Previewnet endpoint, hosted by [Hashio](https://swirldslabs.com/hashio/), a JSON-RPC Relay Community Service. Rate limited based [on IP address](https://github.com/hiero-ledger/hiero-json-rpc-relay/blob/main/docs/rate-limiting.md) and [on global HBAR spend](https://github.com/hiero-ledger/hiero-json-rpc-relay/blob/main/docs/hbar-limiting.md)."
    },
    {
      "name": "localhost",
      "url": "http://localhost:7546",
      "description": "Run your own instance of [`hiero-json-rpc-relay`](https://github.com/hiero-ledger/hiero-json-rpc-relay) on `localhost`, and configure it connect to your choice of Hedera networks. No rate limits apply."
    },
    {
      "name": "WS Mainnet",
      "url": "wss://mainnet.hashio.io/ws",
      "description": "Hedera Web Socket Mainnet endpoint, hosted by [Hashio](https://swirldslabs.com/hashio/), a JSON-RPC Relay Community Service. Rate limited based [on IP address](https://github.com/hiero-ledger/hiero-json-rpc-relay/blob/main/docs/rate-limiting.md) and [on global HBAR spend](https://github.com/hiero-ledger/hiero-json-rpc-relay/blob/main/docs/hbar-limiting.md)."
    },
    {
      "name": "WS Testnet",
      "url": "wss://testnet.hashio.io/ws",
      "description": "Hedera Web Socket Testnet endpoint, hosted by [Hashio](https://swirldslabs.com/hashio/), a JSON-RPC Relay Community Service. Rate limited based [on IP address](https://github.com/hiero-ledger/hiero-json-rpc-relay/blob/main/docs/rate-limiting.md) and [on global HBAR spend](https://github.com/hiero-ledger/hiero-json-rpc-relay/blob/main/docs/hbar-limiting.md)."
    },
    {
      "name": "WS Previewnet",
      "url": "wss://previewnet.hashio.io/ws",
      "description": "Hedera Web Socket Previewnet endpoint, hosted by [Hashio](https://swirldslabs.com/hashio/), a JSON-RPC Relay Community Service. Rate limited based [on IP address](https://github.com/hiero-ledger/hiero-json-rpc-relay/blob/main/docs/rate-limiting.md) and [on global HBAR spend](https://github.com/hiero-ledger/hiero-json-rpc-relay/blob/main/docs/hbar-limiting.md)."
    },
    {
      "name": "WS localhost",
      "url": "ws://localhost:8546",
      "description": "Run your own instance of Web Socket [`hiero-json-rpc-relay`](https://github.com/hiero-ledger/hiero-json-rpc-relay) on `localhost`, and configure it connect to your choice of Hedera networks. No rate limits apply."
    }
  ],
  "methods": [
    {
      "name": "eth_accounts",
      "summary": "Returns a list of addresses owned by client.",
      "description": "![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/http_label.png)",
      "params": [],
      "result": {
        "name": "Accounts",
        "description": "Always returns an empty array",
        "schema": {
          "title": "Accounts",
          "type": "array",
          "pattern": "^\\[\\s*\\]$",
          "items": {
            "$ref": "#/components/schemas/address"
          }
        }
      }
    },
    {
      "name": "eth_blockNumber",
      "summary": "Returns the number of most recent block.",
      "description": "![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/http_label.png) ![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/ws_label.png)",
      "params": [],
      "result": {
        "name": "Block number",
        "schema": {
          "$ref": "#/components/schemas/uint"
        }
      }
    },
    {
      "name": "eth_call",
      "summary": "Executes a new message call immediately without creating a transaction on the block chain.",
      "description": "![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/http_label.png) ![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/ws_label.png)",
      "params": [
        {
          "name": "Transaction",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/GenericTransaction"
          }
        },
        {
          "name": "Block",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/BlockNumberOrTagOrHash"
          }
        }
      ],
      "result": {
        "name": "Return data",
        "schema": {
          "$ref": "#/components/schemas/bytes"
        }
      }
    },
    {
      "name": "eth_chainId",
      "summary": "Returns the chain ID of the current network.",
      "description": "![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/http_label.png) ![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/ws_label.png)",
      "params": [],
      "result": {
        "name": "Chain ID",
        "schema": {
          "$ref": "#/components/schemas/uint"
        }
      }
    },
    {
      "name": "eth_coinbase",
      "summary": "Always returns UNSUPPORTED_METHOD error.",
      "params": [],
      "result": {
        "$ref": "#/components/schemas/unsupportedError"
      }
    },
    {
      "name": "eth_blobBaseFee",
      "summary": "Always returns UNSUPPORTED_METHOD error.",
      "params": [],
      "result": {
        "$ref": "#/components/schemas/unsupportedError"
      }
    },
    {
      "name": "eth_estimateGas",
      "summary": "Generates and returns an estimate of how much gas is necessary to allow the transaction to complete.",
      "description": "![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/http_label.png) ![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/ws_label.png)",
      "params": [
        {
          "name": "Transaction",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/GenericTransaction"
          }
        },
        {
          "name": "Block",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/BlockNumberOrTag"
          }
        }
      ],
      "result": {
        "name": "Gas used",
        "schema": {
          "$ref": "#/components/schemas/uint"
        }
      }
    },
    {
      "name": "eth_feeHistory",
      "summary": "Returns transaction base fee per gas and effective priority fee per gas for the requested/supported block range.",
      "description": "![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/http_label.png)",
      "params": [
        {
          "name": "blockCount",
          "description": "Requested range of blocks. Clients will return less than the requested range if not all blocks are available.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/uint"
          }
        },
        {
          "name": "newestBlock",
          "description": "Highest block of the requested range.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/BlockNumberOrTag"
          }
        },
        {
          "name": "rewardPercentiles",
          "description": "A monotonically increasing list of percentile values. For each block in the requested range, the transactions will be sorted in ascending order by effective tip per gas and the coresponding effective tip for the percentile will be determined, accounting for gas consumed.",
          "required": true,
          "schema": {
            "title": "rewardPercentiles",
            "type": "array",
            "items": {
              "title": "rewardPercentile",
              "description": "Floating point value between 0 and 100.",
              "type": "number",
              "pattern": "^[0-9][0-9]?$|^100$"
            }
          }
        }
      ],
      "result": {
        "name": "Fee history result",
        "description": "Fee history for the returned block range. This can be a subsection of the requested range if not all blocks are available.",
        "schema": {
          "title": "feeHistoryResults",
          "description": "Fee history results.",
          "type": "object",
          "required": ["oldestBlock", "baseFeePerGas", "gasUsedRatio"],
          "properties": {
            "oldestBlock": {
              "title": "oldestBlock",
              "description": "Lowest number block of returned range.",
              "$ref": "#/components/schemas/uint"
            },
            "gasUsedRatio": {
              "title": "gasUsedRatio",
              "description": "An array of gas used ratio.",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ratio"
              }
            },
            "baseFeePerGas": {
              "title": "baseFeePerGas",
              "description": "An array of block base fees per gas. This includes the next block after the newest of the returned range.",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/uint"
              }
            },
            "reward": {
              "title": "reward",
              "description": "A two-dimensional array of effective priority fees per gas at the requested block percentiles.",
              "type": "array",
              "items": {
                "title": "rewardPercentile",
                "description": "An array of effective priority fee per gas data points from a single block. All zeroes are returned if the block is empty.",
                "type": "array",
                "items": {
                  "title": "rewardPercentile",
                  "description": "A given percentile sample of effective priority fees per gas from a single block in ascending order, weighted by gas used. Zeroes are returned if the block is empty.",
                  "$ref": "#/components/schemas/uint"
                }
              }
            }
          },
          "additionalProperties": false
        }
      }
    },
    {
      "name": "eth_gasPrice",
      "summary": "Returns the current price per gas in wei.",
      "description": "![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/http_label.png) ![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/ws_label.png)",
      "params": [],
      "result": {
        "name": "Gas price",
        "schema": {
          "title": "Gas price",
          "$ref": "#/components/schemas/uint"
        }
      }
    },
    {
      "name": "eth_getBalance",
      "summary": "Returns the balance of the account of given address.",
      "description": "![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/http_label.png) ![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/ws_label.png)",
      "params": [
        {
          "name": "Address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/address"
          }
        },
        {
          "name": "Block",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/BlockNumberOrTagOrHash"
          }
        }
      ],
      "result": {
        "name": "Balance",
        "schema": {
          "$ref": "#/components/schemas/uint"
        }
      }
    },
    {
      "name": "eth_getBlockByHash",
      "summary": "Returns information about a block by hash.",
      "description": "![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/http_label.png) ![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/ws_label.png)",
      "params": [
        {
          "name": "Block hash",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/hash32"
          }
        },
        {
          "name": "Hydrated transactions",
          "required": true,
          "schema": {
            "title": "hydrated",
            "type": "boolean"
          }
        }
      ],
      "result": {
        "name": "Block information",
        "schema": {
          "$ref": "#/components/schemas/Block"
        }
      }
    },
    {
      "name": "eth_getBlockByNumber",
      "summary": "Returns information about a block by number.",
      "description": "![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/http_label.png) ![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/ws_label.png)",
      "params": [
        {
          "name": "Block",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/BlockNumberOrTag"
          }
        },
        {
          "name": "Hydrated transactions",
          "required": true,
          "schema": {
            "title": "hydrated",
            "type": "boolean"
          }
        }
      ],
      "result": {
        "name": "Block information",
        "schema": {
          "$ref": "#/components/schemas/Block"
        }
      }
    },
    {
      "name": "eth_getBlockTransactionCountByHash",
      "summary": "Returns the number of transactions in a block from a block matching the given block hash.",
      "description": "![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/http_label.png)",
      "params": [
        {
          "name": "Block hash",
          "schema": {
            "$ref": "#/components/schemas/hash32"
          }
        }
      ],
      "result": {
        "name": "Transaction count",
        "schema": {
          "$ref": "#/components/schemas/uint"
        }
      }
    },
    {
      "name": "eth_getBlockTransactionCountByNumber",
      "summary": "Returns the number of transactions in a block matching the given block number.",
      "description": "![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/http_label.png)",
      "params": [
        {
          "name": "Block",
          "schema": {
            "$ref": "#/components/schemas/BlockNumberOrTag"
          }
        }
      ],
      "result": {
        "name": "Transaction count",
        "schema": {
          "$ref": "#/components/schemas/uint"
        }
      }
    },
    {
      "name": "eth_getCode",
      "summary": "Returns code at a given address.",
      "description": "![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/http_label.png) ![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/ws_label.png)",
      "params": [
        {
          "name": "Address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/address"
          }
        },
        {
          "name": "Block",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/BlockNumberOrTagOrHash"
          }
        }
      ],
      "result": {
        "name": "Bytecode",
        "schema": {
          "$ref": "#/components/schemas/bytes"
        }
      }
    },
    {
      "name": "eth_getLogs",
      "summary": "Returns an array of all logs matching the specified filter.",
      "description": "The block range filter, _i.e._, `fromBlock` and `toBlock` arguments, cannot be larger than `ETH_GET_LOGS_BLOCK_RANGE_LIMIT` (defaults to `1000`). However, when `address` represents a single address, either a `string` or an array with a single element, this restriction is lifted. In any case, if the `topics` param is present the block range must be within ~`302,400` blocks, the equivalent to 7 days.\n\nWhen the logs for an individual address exceeds `MIRROR_NODE_CONTRACT_RESULTS_LOGS_PG_MAX * MIRROR_NODE_LIMIT_PARAM` (defaults to `20k`) an error `-32011` _Mirror Node pagination count range too large_ is returned. These settings are the Mirror Node page limit (defaults to `200`) and Mirror Node entries per page (defaults to `100`) respectively. ![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/http_label.png) ![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/ws_label.png)",
      "params": [
        {
          "name": "Filter",
          "schema": {
            "$ref": "#/components/schemas/Filter"
          }
        }
      ],
      "result": {
        "name": "Log objects",
        "schema": {
          "$ref": "#/components/schemas/FilterResults"
        }
      }
    },
    {
      "name": "eth_getStorageAt",
      "summary": "Returns the value from a storage position at a given address.",
      "description": "![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/http_label.png) ![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/ws_label.png)",
      "params": [
        {
          "name": "Address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/address"
          }
        },
        {
          "name": "Storage slot",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/bytesMax32"
          }
        },
        {
          "name": "Block",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/BlockNumberOrTagOrHash"
          }
        }
      ],
      "result": {
        "name": "Value",
        "schema": {
          "$ref": "#/components/schemas/bytes"
        }
      }
    },
    {
      "name": "eth_getTransactionByBlockHashAndIndex",
      "summary": "Returns information about a transaction by block hash and transaction index position.",
      "description": "![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/http_label.png)",
      "params": [
        {
          "name": "Block hash",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/hash32"
          }
        },
        {
          "name": "Transaction index",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/uint"
          }
        }
      ],
      "result": {
        "name": "Transaction information",
        "schema": {
          "$ref": "#/components/schemas/TransactionInfo"
        }
      }
    },
    {
      "name": "eth_getTransactionByBlockNumberAndIndex",
      "summary": "Returns information about a transaction by block number and transaction index position.",
      "description": "![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/http_label.png)",
      "params": [
        {
          "name": "Block",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/BlockNumberOrTag"
          }
        },
        {
          "name": "Transaction index",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/uint"
          }
        }
      ],
      "result": {
        "name": "Transaction information",
        "schema": {
          "$ref": "#/components/schemas/TransactionInfo"
        }
      }
    },
    {
      "name": "eth_getTransactionByHash",
      "summary": "Returns the information about a transaction requested by transaction hash.",
      "description": "![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/http_label.png) ![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/ws_label.png)",
      "params": [
        {
          "name": "Transaction hash",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/hash32"
          }
        }
      ],
      "result": {
        "name": "Transaction information",
        "schema": {
          "$ref": "#/components/schemas/TransactionInfo"
        }
      }
    },
    {
      "name": "eth_getTransactionCount",
      "summary": "Returns the number of transactions sent from an address.",
      "description": "![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/http_label.png) ![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/ws_label.png)",
      "params": [
        {
          "name": "Address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/address"
          }
        },
        {
          "name": "Block",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/BlockNumberOrTagOrHash"
          }
        }
      ],
      "result": {
        "name": "Account nonce",
        "schema": {
          "$ref": "#/components/schemas/uint"
        }
      }
    },
    {
      "name": "eth_getTransactionReceipt",
      "summary": "Returns the receipt of a transaction by transaction hash.",
      "description": "![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/http_label.png) ![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/ws_label.png)",
      "params": [
        {
          "name": "Transaction hash",
          "schema": {
            "$ref": "#/components/schemas/hash32"
          }
        }
      ],
      "result": {
        "name": "Receipt information",
        "schema": {
          "$ref": "#/components/schemas/ReceiptInfo"
        }
      }
    },
    {
      "name": "eth_getUncleByBlockHashAndIndex",
      "summary": "Returns information about a uncle of a block by hash and uncle index position.",
      "description": "![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/http_label.png)",
      "params": [],
      "result": {
        "name": "eth_getUncleByBlockHashAndIndex result",
        "schema": {
          "description": "Always returns null. There are no uncles in Hedera.",
          "$ref": "#/components/schemas/null"
        }
      }
    },
    {
      "name": "eth_getUncleByBlockNumberAndIndex",
      "summary": "Returns information about a uncle of a block by number and uncle index position.",
      "description": "![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/http_label.png)",
      "params": [],
      "result": {
        "name": "eth_getUncleByBlockNumberAndIndex result",
        "schema": {
          "description": "Always returns null. There are no uncles in Hedera.",
          "$ref": "#/components/schemas/null"
        }
      }
    },
    {
      "name": "eth_getUncleCountByBlockHash",
      "summary": "Returns the number of uncles in a block from a block matching the given block hash.",
      "description": "![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/http_label.png)",
      "params": [
        {
          "name": "Block hash",
          "schema": {
            "$ref": "#/components/schemas/hash32"
          }
        }
      ],
      "result": {
        "name": "Uncle count",
        "schema": {
          "description": "Always returns '0x0'. There are no uncles in Hedera.",
          "title": "hex encoded unsigned integer",
          "type": "string",
          "pattern": "0x0",
          "oneOf": [
            {
              "$ref": "#/components/schemas/notFound"
            },
            {
              "title": "Uncle count",
              "$ref": "#/components/schemas/uint"
            }
          ]
        }
      }
    },
    {
      "name": "eth_getUncleCountByBlockNumber",
      "summary": "Returns the number of transactions in a block matching the given block number.",
      "description": "![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/http_label.png)",
      "params": [
        {
          "name": "Block",
          "schema": {
            "$ref": "#/components/schemas/BlockNumberOrTag"
          }
        }
      ],
      "result": {
        "name": "Uncle count",
        "schema": {
          "description": "Always returns '0x0'. There are no uncles in Hedera.",
          "title": "hex encoded unsigned integer",
          "type": "string",
          "pattern": "0x0",
          "oneOf": [
            {
              "$ref": "#/components/schemas/notFound"
            },
            {
              "title": "Uncle count",
              "$ref": "#/components/schemas/uint"
            }
          ]
        }
      }
    },
    {
      "name": "eth_getWork",
      "summary": "Always returns UNSUPPORTED_METHOD error.",
      "params": [],
      "result": {
        "$ref": "#/components/schemas/unsupportedError"
      }
    },
    {
      "name": "eth_hashrate",
      "summary": "Returns the number of hashes per second that the node is mining with. Always returns 0x0.",
      "description": "![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/http_label.png)",
      "params": [],
      "result": {
        "name": "Mining status",
        "schema": {
          "title": "Hashrate",
          "type": "string",
          "pattern": "0x0"
        }
      }
    },
    {
      "name": "eth_maxPriorityFeePerGas",
      "summary": "Returns the current maxPriorityFeePerGas per gas in wei.",
      "description": "![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/http_label.png) ![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/ws_label.png)",
      "params": [],
      "result": {
        "name": "Max priority fee per gas",
        "schema": {
          "title": "Max priority fee per gas",
          "$ref": "#/components/schemas/uint"
        }
      }
    },
    {
      "name": "eth_mining",
      "summary": "Returns whether the client is a miner. We don't mine, so this always returns false.",
      "description": "![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/http_label.png)",
      "params": [],
      "result": {
        "name": "Mining status",
        "schema": {
          "title": "miningStatus",
          "type": "boolean"
        }
      }
    },
    {
      "name": "eth_newBlockFilter",
      "summary": "Creates a filter in the node, to notify when a new block arrives.",
      "description": "![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/http_label.png)",
      "params": [],
      "result": {
        "name": "Filter identifier",
        "schema": {
          "$ref": "#/components/schemas/uint"
        }
      },
      "tags": [
        {
          "name": "alpha API"
        }
      ]
    },
    {
      "name": "eth_newFilter",
      "summary": "Creates a filter object, based on filter options, to notify when the state changes (logs).",
      "description": "![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/http_label.png) ![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/ws_label.png)",
      "params": [
        {
          "name": "Filter",
          "schema": {
            "$ref": "#/components/schemas/Filter"
          }
        }
      ],
      "result": {
        "name": "Filter identifier",
        "schema": {
          "$ref": "#/components/schemas/uint"
        }
      },
      "tags": [
        {
          "name": "alpha API"
        }
      ]
    },
    {
      "name": "eth_uninstallFilter",
      "summary": "Uninstalls a filter with given id.",
      "description": "![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/http_label.png)",
      "params": [
        {
          "name": "Filter identifier",
          "schema": {
            "$ref": "#/components/schemas/uint"
          }
        }
      ],
      "result": {
        "name": "Success",
        "schema": {
          "type": "boolean"
        }
      },
      "tags": [
        {
          "name": "alpha API"
        }
      ]
    },
    {
      "name": "eth_newPendingTransactionFilter",
      "summary": "Creates a filter in the node, to notify when new pending transactions arrive.",
      "params": [],
      "result": {
        "$ref": "#/components/schemas/unsupportedError"
      },
      "tags": [
        {
          "name": "alpha API"
        }
      ]
    },
    {
      "name": "eth_getFilterLogs",
      "summary": "Returns an array of all logs matching the filter with the given ID (created using `eth_newFilter`).",
      "description": "![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/http_label.png)",
      "params": [
        {
          "name": "Filter identifier",
          "schema": {
            "$ref": "#/components/schemas/uint"
          }
        }
      ],
      "result": {
        "name": "Log objects",
        "schema": {
          "$ref": "#/components/schemas/FilterResults"
        }
      },
      "tags": [
        {
          "name": "alpha API"
        }
      ]
    },
    {
      "name": "eth_getFilterChanges",
      "summary": "Polling method for the filter with the given ID (created using `eth_newFilter`). Returns an array of logs which occurred since last poll.",
      "description": "![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/http_label.png)",
      "params": [
        {
          "name": "Filter identifier",
          "schema": {
            "$ref": "#/components/schemas/uint"
          }
        }
      ],
      "result": {
        "name": "Log objects",
        "schema": {
          "$ref": "#/components/schemas/FilterResults"
        }
      },
      "tags": [
        {
          "name": "alpha API"
        }
      ]
    },
    {
      "name": "eth_protocolVersion",
      "summary": "Always returns UNSUPPORTED_METHOD error.",
      "params": [],
      "result": {
        "$ref": "#/components/schemas/unsupportedError"
      }
    },
    {
      "name": "eth_sendRawTransaction",
      "summary": "Submits a raw transaction.",
      "description": "![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/http_label.png) ![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/ws_label.png)",
      "params": [
        {
          "name": "Transaction",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/bytes"
          }
        }
      ],
      "result": {
        "name": "Transaction hash",
        "schema": {
          "$ref": "#/components/schemas/hash32"
        }
      }
    },
    {
      "name": "eth_sendTransaction",
      "summary": "Signs and submits a transaction.",
      "params": [
        {
          "name": "Transaction",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/GenericTransaction"
          }
        }
      ],
      "result": {
        "$ref": "#/components/schemas/unsupportedError"
      }
    },
    {
      "name": "eth_signTransaction",
      "summary": "Returns an RLP encoded transaction signed by the specified account.",
      "params": [
        {
          "name": "Transaction",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/GenericTransaction"
          }
        }
      ],
      "result": {
        "$ref": "#/components/schemas/unsupportedError"
      }
    },
    {
      "name": "eth_sign",
      "summary": "Returns an EIP-191 signature over the provided data.",
      "params": [
        {
          "name": "Address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/address"
          }
        },
        {
          "name": "Message",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/bytes"
          }
        }
      ],
      "result": {
        "$ref": "#/components/schemas/unsupportedError"
      }
    },
    {
      "name": "eth_submitHashrate",
      "summary": "Always returns UNSUPPORTED_METHOD error.",
      "params": [],
      "result": {
        "$ref": "#/components/schemas/unsupportedError"
      }
    },
    {
      "name": "eth_submitWork",
      "summary": "Used for submitting a proof-of-work solution.",
      "description": "![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/http_label.png)",
      "params": [],
      "result": {
        "name": "PoW solution",
        "schema": {
          "title": "No proof-of-work",
          "description": "Always returns false.",
          "type": "boolean"
        }
      }
    },
    {
      "name": "eth_syncing",
      "summary": "Returns syncing status.",
      "description": "![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/http_label.png)",
      "params": [],
      "result": {
        "name": "Syncing status",
        "schema": {
          "$ref": "#/components/schemas/SyncingStatus"
        }
      }
    },
    {
      "name": "net_listening",
      "summary": "Returns true if client is actively listening for network connections.",
      "description": "![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/http_label.png)",
      "params": [],
      "result": {
        "name": "Listening status.",
        "schema": {
          "title": "Not listening",
          "description": "Always returns false.",
          "type": "boolean"
        }
      }
    },
    {
      "name": "net_version",
      "summary": "Returns the current chain id.",
      "description": "![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/http_label.png)",
      "params": [],
      "result": {
        "name": "The current chain id.",
        "schema": {
          "$ref": "#/components/schemas/int"
        }
      }
    },
    {
      "name": "net_peerCount",
      "summary": "Always returns UNSUPPORTED_METHOD error.",
      "params": [],
      "result": {
        "$ref": "#/components/schemas/unsupportedError"
      }
    },
    {
      "name": "web3_clientVersion",
      "summary": "Returns the current client version.",
      "description": "![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/http_label.png) ![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/ws_label.png)",
      "params": [],
      "result": {
        "name": "The current client version.",
        "schema": {
          "type": "string",
          "pattern": "relay/[0-9]+\\.[0-9]+\\.[0-9]+(-[a-zA-Z0-9-]+)?$"
        }
      }
    },
    {
      "name": "web3_sha3",
      "summary": "Returns sha3 of the input.",
      "description": "![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/http_label.png) ![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/ws_label.png)",
      "params": [],
      "result": {
        "name": "The sha3 result.",
        "schema": {
          "$ref": "#/components/schemas/hash32"
        }
      }
    },
    {
      "name": "eth_subscribe",
      "summary": "Creates a new subscription for desired events. Sends data as soon as it occurs.",
      "description": "![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/ws_label.png)",
      "params": [
        {
          "name": "subscription_type",
          "required": true,
          "schema": {
            "type": "string",
            "enum": ["logs"]
          },
          "description": "The type of event you want to subscribe to."
        },
        {
          "name": "options",
          "required": false,
          "schema": {
            "type": "object",
            "properties": {
              "address": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/address"
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/address"
                    }
                  }
                ],
                "description": "Single address or array of addresses to restrict the logs."
              },
              "topics": {
                "$ref": "#/components/schemas/FilterTopics",
                "description": "Array of topics used to filter logs."
              }
            },
            "additionalProperties": false
          },
          "description": "Filter options for the subscription. Required for 'logs' type."
        }
      ],
      "result": {
        "name": "subscription_id",
        "schema": {
          "type": "string",
          "$ref": "#/components/schemas/hash32"
        },
        "description": "The hex encoded subscription ID used to identify and manage the subscription."
      }
    },
    {
      "name": "eth_unsubscribe",
      "summary": "Cancels a subscription.",
      "description": "![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/ws_label.png)",
      "params": [
        {
          "name": "subscription_id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "The subscription ID to cancel."
        }
      ],
      "result": {
        "name": "success",
        "schema": {
          "type": "boolean"
        },
        "description": "True if the subscription was successfully cancelled, otherwise false."
      }
    },
    {
      "name": "debug_traceTransaction",
      "summary": "Attempts to run the transaction in the exact same manner as it was executed on the network.",
      "description": "![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/http_label.png)",
      "params": [
        {
          "name": "transactionHash",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/hash32"
          },
          "description": "The hash of the transaction to trace."
        },
        {
          "name": "tracer",
          "required": false,
          "schema": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/TracerType"
              },
              {
                "$ref": "#/components/schemas/TracerConfig"
              },
              {
                "$ref": "#/components/schemas/TracerConfigWrapper"
              }
            ]
          },
          "description": "Specifies the type of tracer or configuration object for the tracer."
        },
        {
          "name": "tracerConfig",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/TracerConfig"
          },
          "description": "Configuration object for the tracer."
        }
      ],
      "result": {
        "name": "trace",
        "schema": {
          "type": "object",
          "properties": {
            "callFrame": {
              "$ref": "#/components/schemas/callframe"
            }
          },
          "required": ["callFrame"],
          "additionalProperties": false
        },
        "description": "The trace object containing detailed information about the transaction execution, encapsulated in a call frame."
      }
    },
    {
      "name": "debug_traceBlockByNumber",
      "summary": "Returns the tracing result for all transactions in the block specified by number with a tracer.",
      "description": "![](https://raw.githubusercontent.com/hiero-ledger/hiero-json-rpc-relay/main/docs/images/http_label.png)",
      "params": [
        {
          "name": "blockNumber",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/BlockNumberOrTag"
          },
          "description": "The block number or tag (e.g., 'latest', 'earliest', 'pending', 'safe', 'finalized')."
        },
        {
          "name": "tracerOptions",
          "required": false,
          "schema": {
            "type": "object",
            "properties": {
              "tracer": {
                "$ref": "#/components/schemas/BlockTracerType",
                "description": "The type of tracer to use. Either 'callTracer' or 'prestateTracer'."
              },
              "tracerConfig": {
                "type": "object",
                "description": "Configuration options for the specified tracer",
                "properties": {
                  "onlyTopCall": {
                    "type": "boolean",
                    "description": "When set to true, this will only trace the primary (top-level) call and not any sub-calls."
                  }
                }
              }
            }
          },
          "description": "Specifies the type of tracer and optional configuration. Supported tracers are 'callTracer' and 'prestateTracer'."
        }
      ],
      "result": {
        "name": "traces",
        "schema": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "object",
                "title": "Call Tracer Response",
                "description": "callTracer response format",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": ["CALL", "CREATE"],
                    "description": "The type of action (CALL for function calls or CREATE for contract creation)."
                  },
                  "from": {
                    "$ref": "#/components/schemas/address",
                    "description": "The address of the sender."
                  },
                  "to": {
                    "$ref": "#/components/schemas/address",
                    "description": "The address of the receiver. In the case of a contract creation, this might be null."
                  },
                  "value": {
                    "$ref": "#/components/schemas/uint",
                    "description": "The value transferred with the call, in hexadecimal."
                  },
                  "gas": {
                    "$ref": "#/components/schemas/uint",
                    "description": "The gas provided for the call, in hexadecimal."
                  },
                  "gasUsed": {
                    "$ref": "#/components/schemas/uint",
                    "description": "The gas used during the call, in hexadecimal."
                  },
                  "input": {
                    "$ref": "#/components/schemas/bytes",
                    "description": "The input data sent with the call."
                  },
                  "output": {
                    "$ref": "#/components/schemas/bytes",
                    "description": "The output data returned by the call."
                  },
                  "error": {
                    "type": "string",
                    "description": "Error encountered during the call, if any."
                  },
                  "revertReason": {
                    "type": "string",
                    "description": "Solidity revert reason, if applicable."
                  },
                  "calls": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/subcall"
                    },
                    "description": "Sub-calls made during this call frame."
                  }
                }
              },
              {
                "type": "object",
                "title": "Prestate Tracer Response",
                "description": "prestateTracer response format - an object where keys are ethereum addresses and values contain account state data",
                "properties": {
                  "balance": {
                    "$ref": "#/components/schemas/uint",
                    "description": "The balance of the account/contract, expressed in wei and encoded as a hexadecimal string"
                  },
                  "nonce": {
                    "$ref": "#/components/schemas/uint",
                    "description": "The latest nonce of the account, represented as an unsigned integer. Historical nonces are not supported by now."
                  },
                  "code": {
                    "$ref": "#/components/schemas/bytes",
                    "description": "The bytecode of the contract, encoded as a hexadecimal string. If the account is not a contract, this will be an empty hex string (0x)."
                  },
                  "storage": {
                    "type": "object",
                    "description": "A map of key-value pairs representing the storage slots of the contract. The keys and values are both encoded as hexadecimal strings. If the account is not a contract, this will be an empty object ({}).",
                    "additionalProperties": {
                      "$ref": "#/components/schemas/bytes32"
                    }
                  }
                }
              }
            ]
          }
        },
        "description": "An array of trace objects containing detailed information about all transactions in the block. For callTracer, each item is a call frame with transaction details. For prestateTracer, each item is an object mapping addresses to their account state."
      }
    },
    {
      "name": "eth_getProof",
      "summary": "Always returns UNSUPPORTED_METHOD error.",
      "params": [],
      "result": {
        "$ref": "#/components/schemas/unsupportedError"
      }
    },
    {
      "name": "debug_getBadBlocks",
      "summary": "Returns an array of recent bad blocks that the client has seen on the network.",
      "params": [],
      "result": {
        "name": "Blocks",
        "schema": {
          "title": "Bad block array",
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/BadBlock"
          }
        }
      }
    },
    {
      "name": "debug_getRawBlock",
      "summary": "Returns an RLP-encoded block.",
      "params": [
        {
          "name": "Block",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/BlockNumberOrTag"
          }
        }
      ],
      "result": {
        "name": "Block RLP",
        "schema": {
          "$ref": "#/components/schemas/bytes"
        }
      }
    },
    {
      "name": "debug_getRawHeader",
      "summary": "Returns an RLP-encoded header.",
      "params": [
        {
          "name": "Block",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/BlockNumberOrTag"
          }
        }
      ],
      "result": {
        "name": "Header RLP",
        "schema": {
          "$ref": "#/components/schemas/bytes"
        }
      }
    },
    {
      "name": "debug_getRawReceipts",
      "summary": "Returns an array of EIP-2718 binary-encoded receipts.",
      "params": [
        {
          "name": "Block",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/BlockNumberOrTag"
          }
        }
      ],
      "result": {
        "name": "Receipts",
        "schema": {
          "title": "Receipt array",
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/bytes"
          }
        }
      }
    },
    {
      "name": "debug_getRawTransaction",
      "summary": "Returns an array of EIP-2718 binary-encoded transactions.",
      "params": [
        {
          "name": "Transaction hash",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/hash32"
          }
        }
      ],
      "result": {
        "name": "EIP-2718 binary-encoded transaction",
        "schema": {
          "$ref": "#/components/schemas/bytes"
        }
      }
    },
    {
      "name": "eth_createAccessList",
      "summary": "Generates an access list for a transaction.",
      "params": [
        {
          "name": "Transaction",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/GenericTransaction"
          }
        },
        {
          "name": "Block",
          "required": false,
          "schema": {
            "$ref": "#/components/schemas/BlockNumberOrTag"
          }
        }
      ],
      "result": {
        "name": "Gas used",
        "schema": {
          "title": "Access list result",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "accessList": {
              "title": "accessList",
              "$ref": "#/components/schemas/AccessList"
            },
            "error": {
              "title": "error",
              "type": "string"
            },
            "gasUsed": {
              "title": "Gas used",
              "$ref": "#/components/schemas/uint"
            }
          }
        }
      }
    },
    {
      "name": "eth_getBlockReceipts",
      "summary": "Returns the receipts of a block by number or hash.",
      "params": [
        {
          "name": "Block",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/BlockNumberOrTagOrHash"
          }
        }
      ],
      "result": {
        "name": "Receipts information",
        "schema": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/notFound"
            },
            {
              "title": "Receipts information",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ReceiptInfo"
              }
            }
          ]
        }
      }
    },
    {
      "name": "eth_simulateV1",
      "summary": "Executes a sequence of message calls building on each other's state without creating transactions on the block chain, optionally overriding block and state data",
      "params": [
        {
          "name": "Payload",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/EthSimulatePayload"
          }
        },
        {
          "name": "Block tag",
          "required": false,
          "description": "default: 'latest'",
          "schema": {
            "$ref": "#/components/schemas/BlockNumberOrTagOrHash"
          }
        }
      ],
      "result": {
        "name": "Result of calls",
        "schema": {
          "$ref": "#/components/schemas/EthSimulateResult"
        }
      }
    }
  ],
  "components": {
    "schemas": {
      "address": {
        "title": "hex encoded address",
        "type": "string",
        "pattern": "^0x[0-9,a-f,A-F]{40}$"
      },
      "addresses": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/address"
        }
      },
      "byte": {
        "title": "hex encoded byte",
        "type": "string",
        "pattern": "^0x([0-9,a-f,A-F]?){1,2}$"
      },
      "bytes": {
        "title": "hex encoded bytes",
        "type": "string",
        "pattern": "^0x[0-9a-f]*$"
      },
      "bytes8": {
        "title": "8 hex encoded bytes",
        "type": "string",
        "pattern": "^0x[0-9a-f]{16}$"
      },
      "bytes32": {
        "title": "32 hex encoded bytes",
        "type": "string",
        "pattern": "^0x[0-9a-f]{64}$"
      },
      "bytes256": {
        "title": "256 hex encoded bytes",
        "type": "string",
        "pattern": "^0x[0-9a-f]{512}$"
      },
      "bytes65": {
        "title": "65 hex encoded bytes",
        "type": "string",
        "pattern": "^0x[0-9a-f]{512}$"
      },
      "int": {
        "title": "decimal value integer",
        "type": "string",
        "pattern": "^\\d+$"
      },
      "uint": {
        "title": "hex encoded unsigned integer",
        "type": "string",
        "pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$"
      },
      "uint256": {
        "title": "hex encoded unsigned integer",
        "type": "string",
        "pattern": "^0x[0-9a-f]{64}$"
      },
      "hash16": {
        "title": "16 byte hex value",
        "type": "string",
        "pattern": "^0x[0-9a-f]{32}$"
      },
      "hash32": {
        "title": "32 byte hex value",
        "type": "string",
        "pattern": "^0x[0-9a-f]{64}$"
      },
      "null": {
        "title": "null value",
        "type": "null",
        "pattern": "null"
      },
      "subcall": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["CALL", "CREATE"],
            "description": "The type of action (CALL for function calls or CREATE for contract creation)."
          },
          "from": {
            "$ref": "#/components/schemas/address",
            "description": "The address of the sender."
          },
          "to": {
            "$ref": "#/components/schemas/address",
            "description": "The address of the receiver. In the case of a contract creation, this might be null."
          },
          "value": {
            "$ref": "#/components/schemas/uint",
            "description": "The value transferred with the call, in hexadecimal."
          },
          "gas": {
            "$ref": "#/components/schemas/uint",
            "description": "The gas provided for the call, in hexadecimal."
          },
          "gasUsed": {
            "$ref": "#/components/schemas/uint",
            "description": "The gas used during the call, in hexadecimal."
          },
          "input": {
            "$ref": "#/components/schemas/bytes",
            "description": "The input data sent with the call."
          },
          "output": {
            "$ref": "#/components/schemas/bytes",
            "description": "The output data returned by the call."
          },
          "error": {
            "type": "string",
            "description": "Error encountered during the call, if any."
          },
          "revertReason": {
            "type": "string",
            "description": "Solidity revert reason, if applicable."
          }
        },
        "required": ["from", "gas", "input"]
      },
      "Block": {
        "title": "Block object",
        "type": "object",
        "required": [
          "parentHash",
          "sha3Uncles",
          "miner",
          "stateRoot",
          "transactionsRoot",
          "receiptsRoot",
          "logsBloom",
          "number",
          "gasLimit",
          "gasUsed",
          "timestamp",
          "extraData",
          "mixHash",
          "nonce",
          "size",
          "transactions",
          "uncles",
          "withdrawals",
          "withdrawalsRoot"
        ],
        "properties": {
          "parentHash": {
            "title": "Parent block hash",
            "$ref": "#/components/schemas/hash32"
          },
          "sha3Uncles": {
            "title": "Ommers hash",
            "$ref": "#/components/schemas/hash32"
          },
          "miner": {
            "title": "Coinbase",
            "$ref": "#/components/schemas/address"
          },
          "stateRoot": {
            "title": "State root",
            "$ref": "#/components/schemas/hash32"
          },
          "transactionsRoot": {
            "title": "Transactions root",
            "$ref": "#/components/schemas/hash32"
          },
          "receiptsRoot": {
            "title": "Receipts root",
            "$ref": "#/components/schemas/hash32"
          },
          "logsBloom": {
            "title": "Bloom filter",
            "$ref": "#/components/schemas/bytes256"
          },
          "difficulty": {
            "title": "Difficulty",
            "$ref": "#/components/schemas/uint"
          },
          "number": {
            "title": "Number",
            "$ref": "#/components/schemas/uint"
          },
          "gasLimit": {
            "title": "Gas limit",
            "$ref": "#/components/schemas/uint"
          },
          "gasUsed": {
            "title": "Gas used",
            "$ref": "#/components/schemas/uint"
          },
          "timestamp": {
            "title": "Timestamp",
            "$ref": "#/components/schemas/uint"
          },
          "extraData": {
            "title": "Extra data",
            "$ref": "#/components/schemas/bytes"
          },
          "mixHash": {
            "title": "Mix hash",
            "$ref": "#/components/schemas/hash32"
          },
          "nonce": {
            "title": "Nonce",
            "$ref": "#/components/schemas/bytes8"
          },
          "totalDifficulty": {
            "title": "Total difficult",
            "$ref": "#/components/schemas/uint"
          },
          "baseFeePerGas": {
            "title": "Base fee per gas",
            "$ref": "#/components/schemas/uint"
          },
          "size": {
            "title": "Block size",
            "$ref": "#/components/schemas/uint"
          },
          "transactions": {
            "anyOf": [
              {
                "title": "Transaction hashes",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/hash32"
                }
              },
              {
                "title": "Full transactions",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TransactionInfo"
                }
              }
            ]
          },
          "uncles": {
            "title": "Uncles",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/hash32"
            }
          },
          "withdrawals": {
            "title": "Withdrawals",
            "type": "array",
            "default": []
          },
          "withdrawalsRoot": {
            "title": "Withdrawals root",
            "$ref": "#/components/schemas/hash32"
          }
        }
      },
      "BlockTag": {
        "type": "string",
        "enum": ["earliest", "latest", "pending", "finalized", "safe"],
        "description": "`earliest`: The lowest numbered block the client has available; `latest` | `pending` | 'finalized' | 'safe' : The most recent block."
      },
      "BlockNumberOrTag": {
        "title": "Block number or tag",
        "oneOf": [
          {
            "title": "Block number",
            "$ref": "#/components/schemas/uint"
          },
          {
            "title": "Block tag",
            "$ref": "#/components/schemas/BlockTag"
          }
        ]
      },
      "BlockNumberOrTagOrHash": {
        "title": "Block number or tag",
        "oneOf": [
          {
            "title": "Block number",
            "$ref": "#/components/schemas/uint"
          },
          {
            "title": "Block tag",
            "$ref": "#/components/schemas/BlockTag"
          },
          {
            "title": "Block hash",
            "$ref": "#/components/schemas/hash32"
          }
        ]
      },
      "CallTracerConfig": {
        "title": "CallTracer config",
        "type": "object",
        "properties": {
          "onlyTopCall": {
            "type": "boolean"
          }
        }
      },
      "OpcodeLoggerConfig": {
        "title": "OpcodeLogger config",
        "type": "object",
        "properties": {
          "enableMemory": {
            "type": "boolean"
          },
          "disableStack": {
            "type": "boolean"
          },
          "disableStorage": {
            "type": "boolean"
          }
        }
      },
      "TracerConfig": {
        "title": "Tracer config",
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/CallTracerConfig"
          },
          {
            "$ref": "#/components/schemas/OpcodeLoggerConfig"
          }
        ]
      },
      "TracerType": {
        "title": "Tracer type",
        "type": "string",
        "enum": ["callTracer", "opcodeLogger"]
      },
      "TracerConfigWrapper": {
        "title": "Tracer config wrapper",
        "type": "object",
        "properties": {
          "tracer": {
            "$ref": "#/components/schemas/TracerType"
          },
          "tracerConfig": {
            "$ref": "#/components/schemas/TracerConfig"
          }
        }
      },
      "BlockTracerType": {
        "title": "Block tracer type",
        "type": "string",
        "enum": ["callTracer", "prestateTracer"]
      },
      "TransactionWithSender": {
        "title": "Transaction object with sender",
        "type": "object",
        "allOf": [
          {
            "required": ["from"],
            "properties": {
              "from": {
                "title": "from",
                "$ref": "#/components/schemas/address"
              }
            }
          },
          {
            "$ref": "#/components/schemas/TransactionUnsigned"
          }
        ]
      },
      "Transaction1559Unsigned": {
        "type": "object",
        "title": "EIP-1559 transaction.",
        "required": [
          "type",
          "nonce",
          "gas",
          "value",
          "input",
          "maxFeePerGas",
          "maxPriorityFeePerGas",
          "chainId",
          "accessList"
        ],
        "properties": {
          "type": {
            "title": "type",
            "$ref": "#/components/schemas/byte"
          },
          "nonce": {
            "title": "nonce",
            "$ref": "#/components/schemas/uint"
          },
          "to": {
            "title": "to address",
            "$ref": "#/components/schemas/address"
          },
          "gas": {
            "title": "gas limit",
            "$ref": "#/components/schemas/uint"
          },
          "value": {
            "title": "value",
            "$ref": "#/components/schemas/uint"
          },
          "input": {
            "title": "input data",
            "$ref": "#/components/schemas/bytes"
          },
          "maxPriorityFeePerGas": {
            "title": "max priority fee per gas",
            "description": "Maximum fee per gas the sender is willing to pay to miners in wei",
            "$ref": "#/components/schemas/uint"
          },
          "maxFeePerGas": {
            "title": "max fee per gas",
            "description": "The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei",
            "$ref": "#/components/schemas/uint"
          },
          "accessList": {
            "title": "accessList",
            "description": "EIP-2930 access list",
            "$ref": "#/components/schemas/AccessList"
          },
          "chainId": {
            "title": "chainId",
            "description": "Chain ID that this transaction is valid on.",
            "$ref": "#/components/schemas/uint"
          }
        }
      },
      "TransactionLegacyUnsigned": {
        "type": "object",
        "title": "Legacy transaction.",
        "required": ["type", "nonce", "gas", "value", "input", "gasPrice"],
        "properties": {
          "type": {
            "title": "type",
            "$ref": "#/components/schemas/byte"
          },
          "nonce": {
            "title": "nonce",
            "$ref": "#/components/schemas/uint"
          },
          "to": {
            "title": "to address",
            "$ref": "#/components/schemas/address"
          },
          "gas": {
            "title": "gas limit",
            "$ref": "#/components/schemas/uint"
          },
          "value": {
            "title": "value",
            "$ref": "#/components/schemas/uint"
          },
          "input": {
            "title": "input data",
            "$ref": "#/components/schemas/bytes"
          },
          "gasPrice": {
            "title": "gas price",
            "description": "The gas price willing to be paid by the sender in wei",
            "$ref": "#/components/schemas/uint"
          },
          "chainId": {
            "title": "chainId",
            "description": "Chain ID that this transaction is valid on.",
            "$ref": "#/components/schemas/uint"
          }
        }
      },
      "Transaction1559Signed": {
        "title": "Signed 1559 Transaction",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Transaction1559Unsigned"
          },
          {
            "title": "EIP-1559 transaction signature properties.",
            "required": ["yParity", "r", "s", "v"],
            "properties": {
              "yParity": {
                "title": "yParity",
                "description": "The parity (0 for even, 1 for odd) of the y-value of the secp256k1 signature.",
                "$ref": "#/components/schemas/byte"
              },
              "r": {
                "title": "r",
                "$ref": "#/components/schemas/uint"
              },
              "s": {
                "title": "s",
                "$ref": "#/components/schemas/uint"
              },
              "v": {
                "title": "v",
                "description": "For backwards compatibility, `v` is optionally provided as an alternative to `yParity`. This field is DEPRECATED and all use of it should migrate to `yParity`.",
                "$ref": "#/components/schemas/byte"
              }
            }
          }
        ]
      },
      "TransactionUnsigned": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Transaction7702Unsigned"
          },
          {
            "$ref": "#/components/schemas/Transaction4844Unsigned"
          }
        ]
      },
      "TransactionLegacySigned": {
        "title": "Signed Legacy Transaction",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TransactionLegacyUnsigned"
          },
          {
            "title": "Legacy transaction signature properties.",
            "required": ["v", "r", "s"],
            "properties": {
              "v": {
                "title": "v",
                "$ref": "#/components/schemas/uint"
              },
              "r": {
                "title": "r",
                "$ref": "#/components/schemas/uint"
              },
              "s": {
                "title": "s",
                "$ref": "#/components/schemas/uint"
              }
            }
          }
        ]
      },
      "TransactionSigned": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/Transaction1559Signed"
          },
          {
            "$ref": "#/components/schemas/TransactionLegacySigned"
          }
        ]
      },
      "TransactionInfo": {
        "type": "object",
        "title": "Transaction information",
        "allOf": [
          {
            "title": "Contextual information",
            "required": ["blockHash", "blockNumber", "from", "hash", "transactionIndex"],
            "properties": {
              "blockHash": {
                "title": "block hash",
                "$ref": "#/components/schemas/hash32"
              },
              "blockNumber": {
                "title": "block number",
                "$ref": "#/components/schemas/uint"
              },
              "from": {
                "title": "from address",
                "$ref": "#/components/schemas/address"
              },
              "hash": {
                "title": "transaction hash",
                "$ref": "#/components/schemas/hash32"
              },
              "transactionIndex": {
                "title": "transaction index",
                "$ref": "#/components/schemas/uint"
              }
            }
          },
          {
            "$ref": "#/components/schemas/TransactionSigned"
          }
        ]
      },
      "Log": {
        "title": "log",
        "type": "object",
        "required": ["transactionHash"],
        "properties": {
          "removed": {
            "title": "removed",
            "type": "boolean"
          },
          "logIndex": {
            "title": "log index",
            "$ref": "#/components/schemas/uint"
          },
          "transactionIndex": {
            "title": "transaction index",
            "$ref": "#/components/schemas/uint"
          },
          "transactionHash": {
            "title": "transaction hash",
            "$ref": "#/components/schemas/hash32"
          },
          "blockHash": {
            "title": "block hash",
            "$ref": "#/components/schemas/hash32"
          },
          "blockNumber": {
            "title": "block number",
            "$ref": "#/components/schemas/uint"
          },
          "address": {
            "title": "address",
            "$ref": "#/components/schemas/address"
          },
          "data": {
            "title": "data",
            "$ref": "#/components/schemas/bytes"
          },
          "topics": {
            "title": "topics",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/bytes32"
            }
          }
        }
      },
      "ReceiptInfo": {
        "type": "object",
        "title": "Receipt info",
        "required": [
          "blockHash",
          "blockNumber",
          "from",
          "cumulativeGasUsed",
          "gasUsed",
          "logs",
          "logsBloom",
          "transactionHash",
          "transactionIndex",
          "effectiveGasPrice"
        ],
        "properties": {
          "transactionHash": {
            "title": "transaction hash",
            "$ref": "#/components/schemas/hash32"
          },
          "transactionIndex": {
            "title": "transaction index",
            "$ref": "#/components/schemas/uint"
          },
          "blockHash": {
            "title": "block hash",
            "$ref": "#/components/schemas/hash32"
          },
          "blockNumber": {
            "title": "block number",
            "$ref": "#/components/schemas/uint"
          },
          "from": {
            "title": "from",
            "$ref": "#/components/schemas/address"
          },
          "to": {
            "title": "to",
            "description": "Address of the receiver or null in a contract creation transaction.",
            "$ref": "#/components/schemas/address"
          },
          "cumulativeGasUsed": {
            "title": "cumulative gas used",
            "description": "The sum of gas used by this transaction and all preceding transactions in the same block.",
            "$ref": "#/components/schemas/uint"
          },
          "gasUsed": {
            "title": "gas used",
            "description": "The amount of gas used for this specific transaction alone.",
            "$ref": "#/components/schemas/uint"
          },
          "contractAddress": {
            "title": "contract address",
            "description": "The contract address created, if the transaction was a contract creation, otherwise null.",
            "$ref": "#/components/schemas/address"
          },
          "logs": {
            "title": "logs",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Log"
            }
          },
          "logsBloom": {
            "title": "logs bloom",
            "$ref": "#/components/schemas/bytes256"
          },
          "root": {
            "title": "state root",
            "description": "The post-transaction state root. Only specified for transactions included before the Byzantium upgrade.",
            "$ref": "#/components/schemas/hash32"
          },
          "status": {
            "title": "status",
            "description": "Either 1 (success) or 0 (failure). Only specified for transactions included after the Byzantium upgrade.",
            "$ref": "#/components/schemas/uint"
          },
          "effectiveGasPrice": {
            "title": "effective gas price",
            "description": "The actual value per gas deducted from the sender's account. Before EIP-1559, this is equal to the transaction's gas price. After, it is equal to baseFeePerGas + min(maxFeePerGas - baseFeePerGas, maxPriorityFeePerGas).",
            "$ref": "#/components/schemas/uint"
          }
        }
      },
      "FilterResults": {
        "title": "Filter results",
        "oneOf": [
          {
            "title": "new block hashes",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/hash32"
            }
          },
          {
            "title": "new transaction hashes",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Log"
            }
          },
          {
            "title": "new logs",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Log"
            }
          }
        ]
      },
      "Filter": {
        "title": "filter",
        "type": "object",
        "properties": {
          "fromBlock": {
            "title": "from block",
            "$ref": "#/components/schemas/uint"
          },
          "toBlock": {
            "title": "to block",
            "$ref": "#/components/schemas/uint"
          },
          "blockHash": {
            "title": "Block hash",
            "$ref": "#/components/schemas/hash32"
          },
          "address": {
            "title": "Address(es)",
            "oneOf": [
              {
                "title": "Address",
                "$ref": "#/components/schemas/address"
              },
              {
                "title": "Address",
                "$ref": "#/components/schemas/address"
              }
            ]
          },
          "topics": {
            "title": "Topics",
            "$ref": "#/components/schemas/FilterTopics"
          }
        }
      },
      "FilterTopics": {
        "title": "Filter Topics",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/FilterTopic"
        }
      },
      "FilterTopic": {
        "title": "Filter Topic List Entry",
        "oneOf": [
          {
            "title": "Single Topic Match",
            "$ref": "#/components/schemas/bytes32"
          },
          {
            "title": "Single Topic Match",
            "$ref": "#/components/schemas/bytes32"
          },
          {
            "title": "Multiple Topic Match",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/bytes32"
            }
          }
        ]
      },
      "LogFilter": {
        "title": "log filter",
        "type": "object",
        "properties": {
          "fromBlock": {
            "title": "from block",
            "$ref": "#/components/schemas/uint"
          },
          "toBlock": {
            "title": "to block",
            "$ref": "#/components/schemas/uint"
          },
          "address": {
            "title": "Address",
            "$ref": "#/components/schemas/address"
          },
          "topics": {
            "title": "Topics",
            "$ref": "#/components/schemas/FilterTopics"
          }
        }
      },
      "unsupportedError": {
        "name": "Unsupported Error",
        "schema": {
          "type": "object",
          "properties": {
            "code": {
              "title": "Error code",
              "type": "number",
              "pattern": "-32601"
            },
            "message": {
              "title": "Error message",
              "type": "string",
              "pattern": "Unsupported JSON-RPC method"
            },
            "name": {
              "title": "Error name",
              "type": "string",
              "pattern": "Method not found"
            }
          }
        }
      },
      "callframe": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["CALL", "CREATE"],
            "description": "The type of action (CALL for function calls or CREATE for contract creation)."
          },
          "from": {
            "$ref": "#/components/schemas/address",
            "description": "The address of the sender."
          },
          "to": {
            "$ref": "#/components/schemas/address",
            "description": "The address of the receiver. In the case of a contract creation, this might be null."
          },
          "value": {
            "$ref": "#/components/schemas/uint",
            "description": "The value transferred with the call, in hexadecimal."
          },
          "gas": {
            "$ref": "#/components/schemas/uint",
            "description": "The gas provided for the call, in hexadecimal."
          },
          "gasUsed": {
            "$ref": "#/components/schemas/uint",
            "description": "The gas used during the call, in hexadecimal."
          },
          "input": {
            "$ref": "#/components/schemas/bytes",
            "description": "The input data sent with the call."
          },
          "output": {
            "$ref": "#/components/schemas/bytes",
            "description": "The output data returned by the call."
          },
          "error": {
            "type": "string",
            "description": "Error encountered during the call, if any."
          },
          "revertReason": {
            "type": "string",
            "description": "Solidity revert reason, if applicable."
          },
          "calls": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/subcall"
            },
            "description": "Sub-calls made during this call frame."
          }
        },
        "required": ["from", "gas", "input"]
      },
      "bytesMax32": {
        "title": "32 hex encoded bytes",
        "type": "string",
        "pattern": "^0x[0-9a-f]{0,64}$"
      },
      "bytes48": {
        "title": "48 hex encoded bytes",
        "type": "string",
        "pattern": "^0x[0-9a-f]{96}$"
      },
      "bytes96": {
        "title": "96 hex encoded bytes",
        "type": "string",
        "pattern": "^0x[0-9a-f]{192}$"
      },
      "ratio": {
        "title": "normalized ratio",
        "type": "number",
        "minimum": 0,
        "maximum": 1
      },
      "uint64": {
        "title": "hex encoded 64 bit unsigned integer",
        "type": "string",
        "pattern": "^0x(0|[1-9a-f][0-9a-f]{0,15})$"
      },
      "notFound": {
        "title": "Not Found (null)",
        "type": "null"
      },
      "BadBlock": {
        "title": "Bad block",
        "type": "object",
        "required": ["block", "hash", "rlp"],
        "additionalProperties": false,
        "properties": {
          "block": {
            "title": "Block",
            "$ref": "#/components/schemas/Block"
          },
          "hash": {
            "title": "Hash",
            "$ref": "#/components/schemas/hash32"
          },
          "rlp": {
            "title": "RLP",
            "$ref": "#/components/schemas/bytes"
          }
        }
      },
      "SyncingStatus": {
        "title": "Syncing status",
        "oneOf": [
          {
            "title": "Syncing progress",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "startingBlock": {
                "title": "Starting block",
                "$ref": "#/components/schemas/uint"
              },
              "currentBlock": {
                "title": "Current block",
                "$ref": "#/components/schemas/uint"
              },
              "highestBlock": {
                "title": "Highest block",
                "$ref": "#/components/schemas/uint"
              }
            }
          },
          {
            "title": "Not syncing",
            "description": "Should always return false if not syncing.",
            "type": "boolean"
          }
        ]
      },
      "EthSimulatePayload": {
        "title": "Arguments for multi call",
        "required": ["blockStateCalls"],
        "properties": {
          "blockStateCalls": {
            "title": "Block State Calls",
            "description": "Definition of blocks that can contain calls and overrides",
            "$ref": "#/components/schemas/BlockStateCalls"
          },
          "traceTransfers": {
            "title": "Trace ETH Transfers",
            "description": "Adds ETH transfers as ERC20 transfer events to the logs. These transfers have emitter contract parameter set as address(0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee).\nDefault: false.",
            "type": "boolean"
          },
          "validation": {
            "title": "Validation",
            "description": "When true, the eth_simulateV1 does all validations that a normal EVM would do, except contract sender and signature checks. When false, eth_simulateV1 behaves like eth_call.\nDefault: false.",
            "type": "boolean"
          },
          "returnFullTransactions": {
            "title": "Return Full Transactions",
            "description": "When true, the method returns full transaction objects, otherwise, just hashes are returned.",
            "type": "boolean"
          }
        }
      },
      "BlockStateCalls": {
        "title": "Array of block state calls to be executed at specific, optional block/state.",
        "description": "The size of this array may be limited depending on the client as a DOS protection. 256 is a common/recommended limit as it is the same limit used by BLOCKHASH opcode.",
        "type": "array",
        "properties": {
          "blockOverrides": {
            "title": "Block overrides",
            "description": "Block overrides can be used to replace fields in a block.\ndefault: no block override.",
            "$ref": "#/components/schemas/BlockOverrides"
          },
          "stateOverrides": {
            "title": "State overrides",
            "description": "State overrides can be used to replace existing blockchain state with new state.\nDefault: no state overrides",
            "$ref": "#/components/schemas/StateOverrides"
          },
          "calls": {
            "type": "array",
            "title": "calls",
            "description": "List of transactions to execute at this block/state.\nDefault: []",
            "items": {
              "$ref": "#/components/schemas/GenericCallTransaction"
            }
          }
        }
      },
      "StateOverrides": {
        "title": "Dictionary of addresses in the state to be overridden",
        "type": "object",
        "patternProperties": {
          "^0x[a-fA-F0-9]{40}$": {
            "$ref": "#/components/schemas/AccountOverride"
          }
        },
        "additionalProperties": false
      },
      "AccountOverride": {
        "title": "Details of an account to be overridden",
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/AccountOverrideState"
          },
          {
            "$ref": "#/components/schemas/AccountOverrideStateDiff"
          }
        ]
      },
      "AccountOverrideState": {
        "title": "Account override with whole storage replacement",
        "description": "It is possible to override any kind of address (EOA's, contracts and precompiles)",
        "required": ["state"],
        "properties": {
          "nonce": {
            "title": "Nonce",
            "$ref": "#/components/schemas/uint64"
          },
          "balance": {
            "title": "Balance",
            "$ref": "#/components/schemas/uint256"
          },
          "code": {
            "title": "Code",
            "$ref": "#/components/schemas/bytes"
          },
          "movePrecompileToAddress": {
            "title": "MovePrecompileToAddress",
            "description": "Moves addresses precompile into the specified address. This move is done before the 'code' override is set. When the specified address is not a precompile, the behaviour is undefined and different clients might behave differently.",
            "$ref": "#/components/schemas/address"
          },
          "state": {
            "title": "Storage",
            "description": "Key-value mapping to override all slots in the account storage before executing the call. This functions similar to eth_call's state parameter.",
            "$ref": "#/components/schemas/AccountStorage"
          }
        }
      },
      "AccountOverrideStateDiff": {
        "title": "Account override with partial storage modification",
        "required": ["stateDiff"],
        "properties": {
          "nonce": {
            "title": "Nonce",
            "$ref": "#/components/schemas/uint64"
          },
          "balance": {
            "title": "Balance",
            "$ref": "#/components/schemas/uint256"
          },
          "code": {
            "title": "Code",
            "$ref": "#/components/schemas/bytes"
          },
          "movePrecompileToAddress": {
            "title": "MovePrecompileToAddress",
            "$ref": "#/components/schemas/address",
            "description": "Moves addresses precompile into the specified address. This move is done before the 'code' override is set. Can only move precompiles."
          },
          "stateDiff": {
            "title": "Storage difference",
            "description": "Key-value mapping to override individual slots in the account storage before executing the call. This functions similar to eth_call's state parameter.",
            "$ref": "#/components/schemas/AccountStorage"
          }
        }
      },
      "AccountStorage": {
        "title": "Storage slots for an account",
        "type": "object",
        "patternProperties": {
          "^0x[a-fA-F0-9]{64}$": {
            "$ref": "#/components/schemas/hash32"
          }
        },
        "additionalProperties": false
      },
      "BlockOverrides": {
        "title": "Context fields related to the block being executed",
        "type": "object",
        "properties": {
          "number": {
            "title": "Number",
            "$ref": "#/components/schemas/uint64",
            "description": "When overriding block numbers across multiple blocks, block number need to be increasing. Skipping over blocks numbers is possible. If block number is not specified, it's incremented by one for each block."
          },
          "prevRandao": {
            "title": "The Previous value of randomness beacon",
            "$ref": "#/components/schemas/uint256"
          },
          "time": {
            "title": "Time",
            "$ref": "#/components/schemas/uint64",
            "description": "Time must either increase or remain constant relative to the previous block. If time is not specified, it's incremented by one for each block."
          },
          "gasLimit": {
            "title": "Gas limit",
            "$ref": "#/components/schemas/uint64"
          },
          "feeRecipient": {
            "title": "Fee Recipient (also known as coinbase)",
            "$ref": "#/components/schemas/address"
          },
          "baseFeePerGas": {
            "title": "Base fee per unit of gas",
            "$ref": "#/components/schemas/uint256"
          },
          "withdrawals": {
            "title": "Withdrawals made by validators",
            "$ref": "#/components/schemas/Withdrawals"
          },
          "blobBaseFee": {
            "title": "Base fee per unit of blob gas",
            "$ref": "#/components/schemas/uint64"
          }
        }
      },
      "Withdrawals": {
        "title": "Withdrawals made by validators",
        "description": "This array can have a maximum length of 16.",
        "type": "array",
        "items": [
          {
            "$ref": "#/components/schemas/Withdrawal"
          }
        ]
      },
      "Withdrawal": {
        "type": "object",
        "title": "Validator withdrawal",
        "required": ["index", "validatorIndex", "address", "amount"],
        "additionalProperties": false,
        "properties": {
          "index": {
            "title": "index of withdrawal",
            "$ref": "#/components/schemas/uint64"
          },
          "validatorIndex": {
            "title": "index of validator that generated withdrawal",
            "$ref": "#/components/schemas/uint64"
          },
          "address": {
            "title": "recipient address for withdrawal value",
            "$ref": "#/components/schemas/address"
          },
          "amount": {
            "title": "value contained in withdrawal",
            "$ref": "#/components/schemas/uint256"
          }
        }
      },
      "EthSimulateResult": {
        "title": "Full results of multi call",
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/EthSimulateBlockResultInvalid"
          },
          {
            "$ref": "#/components/schemas/EthSimulateBlockResultSuccess"
          }
        ]
      },
      "EthSimulateBlockResultSuccess": {
        "title": "Full results of multi call",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/EthSimulateBlockResultSingleSuccess"
        }
      },
      "EthSimulateBlockResultSingleSuccess": {
        "title": "Result of eth_simulate block-level, with array of calls",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Block"
          },
          {
            "title": "Eth Simulate call results",
            "required": ["calls"],
            "properties": {
              "calls": {
                "title": "Call Results",
                "$ref": "#/components/schemas/CallResults"
              }
            }
          }
        ]
      },
      "EthSimulateBlockResultInvalid": {
        "title": "Result of eth_simulate not being valid",
        "description": "The error messages are suggestions and a client might decide to return a different errror message than specified here. However, the error codes are enforced by this specification.",
        "type": "object",
        "required": ["error"],
        "properties": {
          "error": {
            "oneOf": [
              {
                "code": -32000,
                "message": "Invalid request"
              },
              {
                "code": -32602,
                "message": "Missing or invalid parameters"
              },
              {
                "code": -32005,
                "message": "Transactions maxFeePerGas is too low"
              },
              {
                "code": -32015,
                "messagE": "Execution error"
              },
              {
                "code": -32016,
                "message": "Timeout"
              },
              {
                "code": -32603,
                "message": "The Ethereum node encountered an internal error"
              },
              {
                "code": -38010,
                "message": "Transactions nonce is too low"
              },
              {
                "code": -38011,
                "message": "Transactions nonce is too high"
              },
              {
                "code": -38012,
                "message": "Transactions baseFeePerGas is too low"
              },
              {
                "code": -38013,
                "message": "Not enough gas provided to pay for intrinsic gas for a transaction"
              },
              {
                "code": -38014,
                "message": "Insufficient funds to pay for gas fees and value for a transaction"
              },
              {
                "code": -38015,
                "message": "Block gas limit exceeded by the block's transactions"
              },
              {
                "code": -38020,
                "message": "Block number in sequence did not increase"
              },
              {
                "code": -38021,
                "message": "Block timestamp in sequence did not increase or stay the same"
              },
              {
                "code": -38022,
                "message": "MovePrecompileToAddress referenced itself in replacement"
              },
              {
                "code": -38023,
                "message": "Multiple MovePrecompileToAddress referencing the same address to replace"
              },
              {
                "code": -38024,
                "message": "Sender is not an EOA"
              },
              {
                "code": -38025,
                "message": "Max init code size exceeded"
              },
              {
                "code": -38026,
                "message": "Client adjustable limit exceeded"
              }
            ]
          }
        }
      },
      "CallResults": {
        "title": "Results of multi call within block",
        "type": "array",
        "items": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/CallResultFailure"
            },
            {
              "$ref": "#/components/schemas/CallResultSuccess"
            }
          ]
        }
      },
      "CallResultFailure": {
        "title": "Result of call failure",
        "description": "The error messages are suggestions, and clients might implement different error messages. However, the error codes are enforced by the spec.",
        "type": "object",
        "required": ["status", "returnData", "gasUsed", "error"],
        "properties": {
          "status": {
            "title": "Call Status Failure",
            "type": "string",
            "pattern": "^0x0$"
          },
          "returnData": {
            "title": "Return data",
            "$ref": "#/components/schemas/bytes"
          },
          "gasUsed": {
            "title": "Return gasUsed",
            "$ref": "#/components/schemas/uint64"
          },
          "error": {
            "oneOf": [
              {
                "code": -32000,
                "message": "Execution reverted"
              },
              {
                "code": -32015,
                "message": "VM execution error"
              }
            ]
          }
        }
      },
      "CallResultSuccess": {
        "title": "Result of call success",
        "type": "object",
        "required": ["status", "returnData", "gasUsed", "logs"],
        "properties": {
          "status": {
            "title": "Call Status Success",
            "type": "string",
            "pattern": "^0x1$"
          },
          "returnData": {
            "title": "Return data",
            "$ref": "#/components/schemas/bytes"
          },
          "gasUsed": {
            "title": "Return gasUsed",
            "$ref": "#/components/schemas/uint64"
          },
          "logs": {
            "title": "Return logs",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CallResultLog"
            }
          }
        }
      },
      "CallResultLog": {
        "title": "log",
        "type": "object",
        "required": ["logIndex", "blockhash", "blockNumber", "transactionHash", "transactionIndex", "address", "data", "topics"],
        "properties": {
          "logIndex": {
            "title": "log index",
            "$ref": "#/components/schemas/uint256"
          },
          "blockHash": {
            "title": "block hash",
            "$ref": "#/components/schemas/hash32"
          },
          "blockNumber": {
            "title": "block number",
            "$ref": "#/components/schemas/uint64"
          },
          "transactionHash": {
            "title": "transaction hash",
            "$ref": "#/components/schemas/hash32"
          },
          "transactionIndex": {
            "title": "transaction index",
            "$ref": "#/components/schemas/uint256"
          },
          "address": {
            "title": "address",
            "description": "When trace transfers is enabled, this field is address(0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee) for ETH transfers.",
            "$ref": "#/components/schemas/address"
          },
          "data": {
            "title": "data",
            "$ref": "#/components/schemas/bytes"
          },
          "topics": {
            "title": "topics",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/bytes32"
            }
          },
          "removed": {
            "title": "removed",
            "type": "boolean",
            "description": "Default: False. The flag is always False if present. A flag indicating if a log was removed in a chain reorganization, which cannot happen in eth_simulateV1."
          }
        }
      },
      "GenericCallTransaction": {
        "type": "object",
        "title": "Transaction object type for call",
        "properties": {
          "type": {
            "title": "type",
            "$ref": "#/components/schemas/byte",
            "description": "Default: 0x2"
          },
          "nonce": {
            "title": "nonce",
            "description": "Default: Defaults to correct nonce",
            "$ref": "#/components/schemas/uint64"
          },
          "to": {
            "title": "to address",
            "$ref": "#/components/schemas/address",
            "description": "Default: 0x0"
          },
          "from": {
            "title": "from address",
            "$ref": "#/components/schemas/address",
            "description": "Default: null"
          },
          "gas": {
            "title": "gas limit",
            "description": "Default: Remaining gas in the current block",
            "$ref": "#/components/schemas/uint64"
          },
          "value": {
            "title": "value",
            "description": "Default: 0",
            "$ref": "#/components/schemas/uint256"
          },
          "input": {
            "title": "input data",
            "description": "Default: no data",
            "$ref": "#/components/schemas/bytes"
          },
          "gasPrice": {
            "title": "gas price",
            "description": "The gas price willing to be paid by the sender in wei\nDefault: 0",
            "$ref": "#/components/schemas/uint256"
          },
          "maxPriorityFeePerGas": {
            "title": "max priority fee per gas",
            "description": "Maximum fee per gas the sender is willing to pay to miners in wei\nDefault: 0",
            "$ref": "#/components/schemas/uint256"
          },
          "maxFeePerGas": {
            "title": "max fee per gas",
            "description": "The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei\nDefault: 0",
            "$ref": "#/components/schemas/uint256"
          },
          "maxFeePerBlobGas": {
            "title": "max fee per blob gas",
            "description": "The maximum total fee per blob gas the sender is willing to pay in wei\nDefault: 0",
            "$ref": "#/components/schemas/uint256"
          },
          "accessList": {
            "title": "accessList",
            "description": "EIP-2930 access list\nDefault: []",
            "$ref": "#/components/schemas/AccessList"
          },
          "blobVersionedHashes": {
            "title": "Blob versioned hashes",
            "description": "EIP-4844 versioned hashes\nDefault: []",
            "$ref": "#/components/schemas/bytes32"
          }
        }
      },
      "AccountProof": {
        "title": "Account proof",
        "type": "object",
        "required": ["address", "accountProof", "balance", "codeHash", "nonce", "storageHash", "storageProof"],
        "additionalProperties": false,
        "properties": {
          "address": {
            "title": "address",
            "$ref": "#/components/schemas/address"
          },
          "accountProof": {
            "title": "accountProof",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/bytes"
            }
          },
          "balance": {
            "title": "balance",
            "$ref": "#/components/schemas/uint256"
          },
          "codeHash": {
            "title": "codeHash",
            "$ref": "#/components/schemas/hash32"
          },
          "nonce": {
            "title": "nonce",
            "$ref": "#/components/schemas/uint64"
          },
          "storageHash": {
            "title": "storageHash",
            "$ref": "#/components/schemas/hash32"
          },
          "storageProof": {
            "title": "Storage proofs",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StorageProof"
            }
          }
        }
      },
      "StorageProof": {
        "title": "Storage proof",
        "type": "object",
        "required": ["key", "value", "proof"],
        "additionalProperties": false,
        "properties": {
          "key": {
            "title": "key",
            "$ref": "#/components/schemas/bytesMax32"
          },
          "value": {
            "title": "value",
            "$ref": "#/components/schemas/uint256"
          },
          "proof": {
            "title": "proof",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/bytes"
            }
          }
        }
      },
      "Transaction7702Unsigned": {
        "type": "object",
        "title": "EIP-7702 transaction",
        "required": [
          "type",
          "nonce",
          "to",
          "gas",
          "value",
          "input",
          "maxPriorityFeePerGas",
          "maxFeePerGas",
          "accessList",
          "chainId",
          "authorizationList"
        ],
        "properties": {
          "type": {
            "title": "type",
            "type": "string",
            "pattern": "^0x4$"
          },
          "nonce": {
            "title": "nonce",
            "$ref": "#/components/schemas/uint"
          },
          "to": {
            "title": "to address",
            "$ref": "#/components/schemas/address"
          },
          "gas": {
            "title": "gas limit",
            "$ref": "#/components/schemas/uint"
          },
          "value": {
            "title": "value",
            "$ref": "#/components/schemas/uint"
          },
          "input": {
            "title": "input data",
            "$ref": "#/components/schemas/bytes"
          },
          "maxPriorityFeePerGas": {
            "title": "max priority fee per gas",
            "description": "Maximum fee per gas the sender is willing to pay to miners in wei",
            "$ref": "#/components/schemas/uint"
          },
          "maxFeePerGas": {
            "title": "max fee per gas",
            "description": "The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei",
            "$ref": "#/components/schemas/uint"
          },
          "gasPrice": {
            "title": "gas price",
            "description": "The effective gas price paid by the sender in wei. For transactions not yet included in a block, this value should be set equal to the max fee per gas. This field is DEPRECATED, please transition to using effectiveGasPrice in the receipt object going forward.",
            "$ref": "#/components/schemas/uint"
          },
          "accessList": {
            "title": "accessList",
            "description": "EIP-2930 access lists",
            "$ref": "#/components/schemas/AccessList"
          },
          "chainId": {
            "title": "chainId",
            "description": "Chain ID that this transaction is valid on",
            "$ref": "#/components/schemas/uint"
          },
          "authorizationList": {
            "title": "authorizationList",
            "$ref": "#/components/schemas/AuthorizationList"
          }
        }
      },
      "AuthorizationList": {
        "title": "Authorization List",
        "description": "List of authorizations for the transaction",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "chainId": {
              "title": "chainId",
              "description": "Chain ID on which this transaction is valid",
              "$ref": "#/components/schemas/uint"
            },
            "nonce": {
              "title": "nonce",
              "$ref": "#/components/schemas/uint"
            },
            "address": {
              "$ref": "#/components/schemas/address"
            },
            "yParity": {
              "title": "yParity",
              "description": "The parity (0 for even, 1 for odd) of the y-value of the secp256k1 signature",
              "$ref": "#/components/schemas/byte"
            },
            "r": {
              "title": "r",
              "$ref": "#/components/schemas/uint256"
            },
            "s": {
              "title": "s",
              "$ref": "#/components/schemas/uint256"
            }
          },
          "required": ["chainId", "nonce", "address", "yParity", "r", "s"]
        }
      },
      "Transaction4844Unsigned": {
        "type": "object",
        "title": "EIP-4844 transaction.",
        "required": [
          "type",
          "nonce",
          "to",
          "gas",
          "value",
          "input",
          "maxPriorityFeePerGas",
          "maxFeePerGas",
          "maxFeePerBlobGas",
          "accessList",
          "blobVersionedHashes",
          "chainId"
        ],
        "properties": {
          "type": {
            "title": "type",
            "type": "string",
            "pattern": "^0x3$"
          },
          "nonce": {
            "title": "nonce",
            "$ref": "#/components/schemas/uint"
          },
          "to": {
            "title": "to address",
            "$ref": "#/components/schemas/address"
          },
          "gas": {
            "title": "gas limit",
            "$ref": "#/components/schemas/uint"
          },
          "value": {
            "title": "value",
            "$ref": "#/components/schemas/uint"
          },
          "input": {
            "title": "input data",
            "$ref": "#/components/schemas/bytes"
          },
          "maxPriorityFeePerGas": {
            "title": "max priority fee per gas",
            "description": "Maximum fee per gas the sender is willing to pay to miners in wei",
            "$ref": "#/components/schemas/uint"
          },
          "maxFeePerGas": {
            "title": "max fee per gas",
            "description": "The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei",
            "$ref": "#/components/schemas/uint"
          },
          "maxFeePerBlobGas": {
            "title": "max fee per blob gas",
            "description": "The maximum total fee per gas the sender is willing to pay for blob gas in wei",
            "$ref": "#/components/schemas/uint"
          },
          "gasPrice": {
            "title": "gas price",
            "description": "The effective gas price paid by the sender in wei. For transactions not yet included in a block, this value should be set equal to the max fee per gas. This field is DEPRECATED, please transition to using effectiveGasPrice in the receipt object going forward.",
            "$ref": "#/components/schemas/uint"
          },
          "accessList": {
            "title": "accessList",
            "description": "EIP-2930 access list",
            "$ref": "#/components/schemas/AccessList"
          },
          "blobVersionedHashes": {
            "title": "blobVersionedHashes",
            "description": "List of versioned blob hashes associated with the transaction's EIP-4844 data blobs",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/hash32"
            }
          },
          "chainId": {
            "title": "chainId",
            "description": "Chain ID that this transaction is valid on",
            "$ref": "#/components/schemas/uint"
          }
        }
      },
      "AccessListEntry": {
        "title": "Access list entry",
        "type": "object",
        "additionalProperties": false,
        "required": ["address", "storageKeys"],
        "properties": {
          "address": {
            "$ref": "#/components/schemas/address"
          },
          "storageKeys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/hash32"
            }
          }
        }
      },
      "AccessList": {
        "title": "Access list",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/AccessListEntry"
        }
      },
      "Transaction2930Unsigned": {
        "type": "object",
        "title": "EIP-2930 transaction.",
        "required": ["type", "nonce", "gas", "value", "input", "gasPrice", "chainId", "accessList"],
        "properties": {
          "type": {
            "title": "type",
            "type": "string",
            "pattern": "^0x1$"
          },
          "nonce": {
            "title": "nonce",
            "$ref": "#/components/schemas/uint"
          },
          "to": {
            "title": "to address",
            "oneOf": [
              {
                "title": "Contract Creation (null)",
                "type": "null"
              },
              {
                "title": "Address",
                "$ref": "#/components/schemas/address"
              }
            ]
          },
          "gas": {
            "title": "gas limit",
            "$ref": "#/components/schemas/uint"
          },
          "value": {
            "title": "value",
            "$ref": "#/components/schemas/uint"
          },
          "input": {
            "title": "input data",
            "$ref": "#/components/schemas/bytes"
          },
          "gasPrice": {
            "title": "gas price",
            "description": "The gas price willing to be paid by the sender in wei",
            "$ref": "#/components/schemas/uint"
          },
          "accessList": {
            "title": "accessList",
            "description": "EIP-2930 access list",
            "$ref": "#/components/schemas/AccessList"
          },
          "chainId": {
            "title": "chainId",
            "description": "Chain ID that this transaction is valid on.",
            "$ref": "#/components/schemas/uint"
          }
        }
      },
      "Transaction7702Signed": {
        "title": "Signed 7702 Transaction",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Transaction7702Unsigned"
          },
          {
            "title": "EIP-7702 transaction signature properties.",
            "required": ["yParity", "r", "s"],
            "properties": {
              "yParity": {
                "title": "yParity",
                "description": "The parity (0 for even, 1 for odd) of the y-value of the secp256k1 signature.",
                "$ref": "#/components/schemas/byte"
              },
              "v": {
                "title": "v",
                "description": "For backwards compatibility, `v` is optionally provided as an alternative to `yParity`. This field is DEPRECATED and all use of it should migrate to `yParity`.",
                "$ref": "#/components/schemas/byte"
              },
              "r": {
                "title": "r",
                "$ref": "#/components/schemas/uint"
              },
              "s": {
                "title": "s",
                "$ref": "#/components/schemas/uint"
              }
            }
          }
        ]
      },
      "Transaction4844Signed": {
        "title": "Signed 4844 Transaction",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Transaction4844Unsigned"
          },
          {
            "title": "EIP-4844 transaction signature properties.",
            "required": ["yParity", "r", "s"],
            "properties": {
              "yParity": {
                "title": "yParity",
                "description": "The parity (0 for even, 1 for odd) of the y-value of the secp256k1 signature.",
                "$ref": "#/components/schemas/byte"
              },
              "v": {
                "title": "v",
                "description": "For backwards compatibility, `v` is optionally provided as an alternative to `yParity`. This field is DEPRECATED and all use of it should migrate to `yParity`.",
                "$ref": "#/components/schemas/byte"
              },
              "r": {
                "title": "r",
                "$ref": "#/components/schemas/uint"
              },
              "s": {
                "title": "s",
                "$ref": "#/components/schemas/uint"
              }
            }
          }
        ]
      },
      "Transaction2930Signed": {
        "title": "Signed 2930 Transaction",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Transaction2930Unsigned"
          },
          {
            "title": "EIP-2930 transaction signature properties.",
            "required": ["yParity", "r", "s"],
            "properties": {
              "yParity": {
                "title": "yParity",
                "description": "The parity (0 for even, 1 for odd) of the y-value of the secp256k1 signature.",
                "$ref": "#/components/schemas/byte"
              },
              "v": {
                "title": "v",
                "description": "For backwards compatibility, `v` is optionally provided as an alternative to `yParity`. This field is DEPRECATED and all use of it should migrate to `yParity`.",
                "$ref": "#/components/schemas/byte"
              },
              "r": {
                "title": "r",
                "$ref": "#/components/schemas/uint"
              },
              "s": {
                "title": "s",
                "$ref": "#/components/schemas/uint"
              }
            }
          }
        ]
      },
      "GenericTransaction": {
        "type": "object",
        "title": "Transaction object generic to all types",
        "additionalProperties": false,
        "properties": {
          "type": {
            "title": "type",
            "$ref": "#/components/schemas/byte"
          },
          "nonce": {
            "title": "nonce",
            "$ref": "#/components/schemas/uint"
          },
          "to": {
            "title": "to address",
            "oneOf": [
              {
                "title": "Contract Creation (null)",
                "type": "null"
              },
              {
                "title": "Address",
                "$ref": "#/components/schemas/address"
              }
            ]
          },
          "from": {
            "title": "from address",
            "$ref": "#/components/schemas/address"
          },
          "gas": {
            "title": "gas limit",
            "$ref": "#/components/schemas/uint"
          },
          "value": {
            "title": "value",
            "$ref": "#/components/schemas/uint"
          },
          "input": {
            "title": "input data",
            "$ref": "#/components/schemas/bytes"
          },
          "gasPrice": {
            "title": "gas price",
            "description": "The gas price willing to be paid by the sender in wei",
            "$ref": "#/components/schemas/uint"
          },
          "maxPriorityFeePerGas": {
            "title": "max priority fee per gas",
            "description": "Maximum fee per gas the sender is willing to pay to miners in wei",
            "$ref": "#/components/schemas/uint"
          },
          "maxFeePerGas": {
            "title": "max fee per gas",
            "description": "The maximum total fee per gas the sender is willing to pay (includes the network / base fee and miner / priority fee) in wei",
            "$ref": "#/components/schemas/uint"
          },
          "maxFeePerBlobGas": {
            "title": "max fee per blob gas",
            "description": "The maximum total fee per gas the sender is willing to pay for blob gas in wei",
            "$ref": "#/components/schemas/uint"
          },
          "accessList": {
            "title": "accessList",
            "description": "EIP-2930 access list",
            "$ref": "#/components/schemas/AccessList"
          },
          "blobVersionedHashes": {
            "title": "blobVersionedHashes",
            "description": "List of versioned blob hashes associated with the transaction's EIP-4844 data blobs.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/hash32"
            }
          },
          "blobs": {
            "title": "blobs",
            "description": "Raw blob data.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/bytes"
            }
          },
          "chainId": {
            "title": "chainId",
            "description": "Chain ID that this transaction is valid on.",
            "$ref": "#/components/schemas/uint"
          },
          "authorizationList": {
            "title": "authorizationList",
            "description": "EIP-7702 authorization list",
            "$ref": "#/components/schemas/AuthorizationList"
          }
        }
      },
      "BlobAndProofV1": {
        "title": "Blob and proof object V1",
        "type": "object",
        "required": ["blob", "proof"],
        "properties": {
          "blob": {
            "title": "Blob",
            "$ref": "#/components/schemas/bytes"
          },
          "proof": {
            "title": "proof",
            "$ref": "#/components/schemas/bytes48"
          }
        }
      },
      "BlobAndProofV2": {
        "title": "Blob and proof object V2",
        "type": "object",
        "required": ["blob", "proofs"],
        "properties": {
          "blob": {
            "title": "Blob",
            "$ref": "#/components/schemas/bytes"
          },
          "proofs": {
            "title": "Cell Proofs",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/bytes48"
            }
          }
        }
      },
      "ForkchoiceStateV1": {
        "title": "Forkchoice state object V1",
        "type": "object",
        "required": ["headBlockHash", "safeBlockHash", "finalizedBlockHash"],
        "properties": {
          "headBlockHash": {
            "title": "Head block hash",
            "$ref": "#/components/schemas/hash32"
          },
          "safeBlockHash": {
            "title": "Safe block hash",
            "$ref": "#/components/schemas/hash32"
          },
          "finalizedBlockHash": {
            "title": "Finalized block hash",
            "$ref": "#/components/schemas/hash32"
          }
        }
      },
      "ForkchoiceUpdatedResponseV1": {
        "title": "Forkchoice updated response",
        "type": "object",
        "required": ["payloadStatus"],
        "properties": {
          "payloadStatus": {
            "title": "Payload status",
            "$ref": "#/components/schemas/RestrictedPayloadStatusV1"
          },
          "payloadId": {
            "title": "Payload id",
            "$ref": "#/components/schemas/bytes8"
          }
        }
      },
      "PayloadAttributesV1": {
        "title": "Payload attributes object V1",
        "type": "object",
        "required": ["timestamp", "prevRandao", "suggestedFeeRecipient"],
        "properties": {
          "timestamp": {
            "title": "Timestamp",
            "$ref": "#/components/schemas/uint64"
          },
          "prevRandao": {
            "title": "Previous randao value",
            "$ref": "#/components/schemas/bytes32"
          },
          "suggestedFeeRecipient": {
            "title": "Suggested fee recipient",
            "$ref": "#/components/schemas/address"
          }
        }
      },
      "PayloadAttributesV2": {
        "title": "Payload attributes object V2",
        "type": "object",
        "required": ["timestamp", "prevRandao", "suggestedFeeRecipient", "withdrawals"],
        "properties": {
          "timestamp": {
            "$ref": "#/components/schemas/PayloadAttributesV1/properties/timestamp"
          },
          "prevRandao": {
            "$ref": "#/components/schemas/PayloadAttributesV1/properties/prevRandao"
          },
          "suggestedFeeRecipient": {
            "$ref": "#/components/schemas/PayloadAttributesV1/properties/suggestedFeeRecipient"
          },
          "withdrawals": {
            "title": "Withdrawals",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WithdrawalV1"
            }
          }
        }
      },
      "PayloadAttributesV3": {
        "title": "Payload attributes object V3",
        "type": "object",
        "required": ["timestamp", "prevRandao", "suggestedFeeRecipient", "withdrawals", "parentBeaconBlockRoot"],
        "properties": {
          "timestamp": {
            "$ref": "#/components/schemas/PayloadAttributesV2/properties/timestamp"
          },
          "prevRandao": {
            "$ref": "#/components/schemas/PayloadAttributesV2/properties/prevRandao"
          },
          "suggestedFeeRecipient": {
            "$ref": "#/components/schemas/PayloadAttributesV2/properties/suggestedFeeRecipient"
          },
          "withdrawals": {
            "$ref": "#/components/schemas/PayloadAttributesV2/properties/withdrawals"
          },
          "parentBeaconBlockRoot": {
            "title": "Parent beacon block root",
            "$ref": "#/components/schemas/hash32"
          }
        }
      },
      "PayloadStatusV1": {
        "title": "Payload status object V1",
        "type": "object",
        "required": ["status"],
        "properties": {
          "status": {
            "title": "Payload validation status",
            "type": "string",
            "enum": ["VALID", "INVALID", "SYNCING", "ACCEPTED", "INVALID_BLOCK_HASH"]
          },
          "latestValidHash": {
            "title": "The hash of the most recent valid block",
            "$ref": "#/components/schemas/hash32"
          },
          "validationError": {
            "title": "Validation error message",
            "type": "string"
          }
        }
      },
      "RestrictedPayloadStatusV1": {
        "$ref": "#/components/schemas/PayloadStatusV1",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/PayloadStatusV1/properties/status",
            "description": "Set of possible values is restricted to VALID, INVALID, SYNCING",
            "enum": ["VALID", "INVALID", "SYNCING"]
          },
          "latestValidHash": {
            "$ref": "#/components/schemas/PayloadStatusV1/properties/latestValidHash"
          },
          "validationError": {
            "$ref": "#/components/schemas/PayloadStatusV1/properties/validationError"
          }
        }
      },
      "PayloadStatusNoInvalidBlockHash": {
        "$ref": "#/components/schemas/PayloadStatusV1",
        "title": "Payload status object deprecating INVALID_BLOCK_HASH status",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/PayloadStatusV1/properties/status",
            "enum": ["VALID", "INVALID", "SYNCING", "ACCEPTED"]
          },
          "latestValidHash": {
            "$ref": "#/components/schemas/PayloadStatusV1/properties/latestValidHash"
          },
          "validationError": {
            "$ref": "#/components/schemas/PayloadStatusV1/properties/validationError"
          }
        }
      },
      "ExecutionPayloadV1": {
        "title": "Execution payload object V1",
        "type": "object",
        "required": [
          "parentHash",
          "feeRecipient",
          "stateRoot",
          "receiptsRoot",
          "logsBloom",
          "prevRandao",
          "blockNumber",
          "gasLimit",
          "gasUsed",
          "timestamp",
          "extraData",
          "baseFeePerGas",
          "blockHash",
          "transactions"
        ],
        "properties": {
          "parentHash": {
            "title": "Parent block hash",
            "$ref": "#/components/schemas/hash32"
          },
          "feeRecipient": {
            "title": "Recipient of transaction priority fees",
            "$ref": "#/components/schemas/address"
          },
          "stateRoot": {
            "title": "State root",
            "$ref": "#/components/schemas/hash32"
          },
          "receiptsRoot": {
            "title": "Receipts root",
            "$ref": "#/components/schemas/hash32"
          },
          "logsBloom": {
            "title": "Bloom filter",
            "$ref": "#/components/schemas/bytes256"
          },
          "prevRandao": {
            "title": "Previous randao value",
            "$ref": "#/components/schemas/bytes32"
          },
          "blockNumber": {
            "title": "Block number",
            "$ref": "#/components/schemas/uint64"
          },
          "gasLimit": {
            "title": "Gas limit",
            "$ref": "#/components/schemas/uint64"
          },
          "gasUsed": {
            "title": "Gas used",
            "$ref": "#/components/schemas/uint64"
          },
          "timestamp": {
            "title": "Timestamp",
            "$ref": "#/components/schemas/uint64"
          },
          "extraData": {
            "title": "Extra data",
            "$ref": "#/components/schemas/bytesMax32"
          },
          "baseFeePerGas": {
            "title": "Base fee per gas",
            "$ref": "#/components/schemas/uint256"
          },
          "blockHash": {
            "title": "Block hash",
            "$ref": "#/components/schemas/hash32"
          },
          "transactions": {
            "title": "Transactions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/bytes"
            }
          }
        }
      },
      "WithdrawalV1": {
        "title": "Withdrawal object V1",
        "type": "object",
        "required": ["index", "validatorIndex", "address", "amount"],
        "properties": {
          "index": {
            "title": "Withdrawal index",
            "$ref": "#/components/schemas/uint64"
          },
          "validatorIndex": {
            "title": "Validator index",
            "$ref": "#/components/schemas/uint64"
          },
          "address": {
            "title": "Withdrawal address",
            "$ref": "#/components/schemas/address"
          },
          "amount": {
            "title": "Withdrawal amount",
            "$ref": "#/components/schemas/uint64"
          }
        }
      },
      "ExecutionPayloadV2": {
        "title": "Execution payload object V2",
        "type": "object",
        "required": [
          "parentHash",
          "feeRecipient",
          "stateRoot",
          "receiptsRoot",
          "logsBloom",
          "prevRandao",
          "blockNumber",
          "gasLimit",
          "gasUsed",
          "timestamp",
          "extraData",
          "baseFeePerGas",
          "blockHash",
          "transactions",
          "withdrawals"
        ],
        "properties": {
          "parentHash": {
            "$ref": "#/components/schemas/ExecutionPayloadV1/properties/parentHash"
          },
          "feeRecipient": {
            "$ref": "#/components/schemas/ExecutionPayloadV1/properties/feeRecipient"
          },
          "stateRoot": {
            "$ref": "#/components/schemas/ExecutionPayloadV1/properties/stateRoot"
          },
          "receiptsRoot": {
            "$ref": "#/components/schemas/ExecutionPayloadV1/properties/receiptsRoot"
          },
          "logsBloom": {
            "$ref": "#/components/schemas/ExecutionPayloadV1/properties/logsBloom"
          },
          "prevRandao": {
            "$ref": "#/components/schemas/ExecutionPayloadV1/properties/prevRandao"
          },
          "blockNumber": {
            "$ref": "#/components/schemas/ExecutionPayloadV1/properties/blockNumber"
          },
          "gasLimit": {
            "$ref": "#/components/schemas/ExecutionPayloadV1/properties/gasLimit"
          },
          "gasUsed": {
            "$ref": "#/components/schemas/ExecutionPayloadV1/properties/gasUsed"
          },
          "timestamp": {
            "$ref": "#/components/schemas/ExecutionPayloadV1/properties/timestamp"
          },
          "extraData": {
            "$ref": "#/components/schemas/ExecutionPayloadV1/properties/extraData"
          },
          "baseFeePerGas": {
            "$ref": "#/components/schemas/ExecutionPayloadV1/properties/baseFeePerGas"
          },
          "blockHash": {
            "$ref": "#/components/schemas/ExecutionPayloadV1/properties/blockHash"
          },
          "transactions": {
            "$ref": "#/components/schemas/ExecutionPayloadV1/properties/transactions"
          },
          "withdrawals": {
            "title": "Withdrawals",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WithdrawalV1"
            }
          }
        }
      },
      "ExecutionPayloadV3": {
        "title": "Execution payload object V3",
        "type": "object",
        "required": [
          "parentHash",
          "feeRecipient",
          "stateRoot",
          "receiptsRoot",
          "logsBloom",
          "prevRandao",
          "blockNumber",
          "gasLimit",
          "gasUsed",
          "timestamp",
          "extraData",
          "baseFeePerGas",
          "blockHash",
          "transactions",
          "withdrawals",
          "blobGasUsed",
          "excessBlobGas"
        ],
        "properties": {
          "parentHash": {
            "$ref": "#/components/schemas/ExecutionPayloadV2/properties/parentHash"
          },
          "feeRecipient": {
            "$ref": "#/components/schemas/ExecutionPayloadV2/properties/feeRecipient"
          },
          "stateRoot": {
            "$ref": "#/components/schemas/ExecutionPayloadV2/properties/stateRoot"
          },
          "receiptsRoot": {
            "$ref": "#/components/schemas/ExecutionPayloadV2/properties/receiptsRoot"
          },
          "logsBloom": {
            "$ref": "#/components/schemas/ExecutionPayloadV2/properties/logsBloom"
          },
          "prevRandao": {
            "$ref": "#/components/schemas/ExecutionPayloadV2/properties/prevRandao"
          },
          "blockNumber": {
            "$ref": "#/components/schemas/ExecutionPayloadV2/properties/blockNumber"
          },
          "gasLimit": {
            "$ref": "#/components/schemas/ExecutionPayloadV2/properties/gasLimit"
          },
          "gasUsed": {
            "$ref": "#/components/schemas/ExecutionPayloadV2/properties/gasUsed"
          },
          "timestamp": {
            "$ref": "#/components/schemas/ExecutionPayloadV2/properties/timestamp"
          },
          "extraData": {
            "$ref": "#/components/schemas/ExecutionPayloadV2/properties/extraData"
          },
          "baseFeePerGas": {
            "$ref": "#/components/schemas/ExecutionPayloadV2/properties/baseFeePerGas"
          },
          "blockHash": {
            "$ref": "#/components/schemas/ExecutionPayloadV2/properties/blockHash"
          },
          "transactions": {
            "$ref": "#/components/schemas/ExecutionPayloadV2/properties/transactions"
          },
          "withdrawals": {
            "$ref": "#/components/schemas/ExecutionPayloadV2/properties/withdrawals"
          },
          "blobGasUsed": {
            "title": "Blob gas used",
            "$ref": "#/components/schemas/uint64"
          },
          "excessBlobGas": {
            "title": "Excess blob gas",
            "$ref": "#/components/schemas/uint64"
          }
        }
      },
      "ExecutionPayloadBodyV1": {
        "title": "Execution payload body object V1",
        "type": "object",
        "required": ["transactions"],
        "properties": {
          "transactions": {
            "$ref": "#/components/schemas/ExecutionPayloadV1/properties/transactions"
          },
          "withdrawals": {
            "title": "Withdrawals",
            "type": ["array", "null"],
            "items": {
              "$ref": "#/components/schemas/WithdrawalV1"
            }
          }
        }
      },
      "BlobsBundleV1": {
        "title": "Blobs bundle object V1",
        "type": "object",
        "required": ["commitments", "proofs", "blobs"],
        "properties": {
          "commitments": {
            "title": "Commitments",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/bytes48"
            }
          },
          "proofs": {
            "title": "Proofs",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/bytes48"
            }
          },
          "blobs": {
            "title": "Blobs",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/bytes"
            }
          }
        }
      },
      "BlobsBundleV2": {
        "title": "Blobs bundle object V2",
        "type": "object",
        "required": ["commitments", "proofs", "blobs"],
        "properties": {
          "commitments": {
            "title": "Commitments",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/bytes48"
            }
          },
          "proofs": {
            "title": "Proofs",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/bytes48"
            }
          },
          "blobs": {
            "title": "Blobs",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/bytes"
            }
          }
        }
      },
      "TransitionConfigurationV1": {
        "title": "Transition configuration object",
        "type": "object",
        "required": ["terminalTotalDifficulty", "terminalBlockHash", "terminalBlockNumber"],
        "properties": {
          "terminalTotalDifficulty": {
            "title": "Terminal total difficulty",
            "$ref": "#/components/schemas/uint256"
          },
          "terminalBlockHash": {
            "title": "Terminal block hash",
            "$ref": "#/components/schemas/hash32"
          },
          "terminalBlockNumber": {
            "title": "Terminal block number",
            "$ref": "#/components/schemas/uint64"
          }
        }
      }
    }
  }
}